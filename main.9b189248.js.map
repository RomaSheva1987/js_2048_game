{"version":3,"sources":["scripts/main.js"],"names":["field","startButton","document","querySelector","startMessage","messageLose","messageWin","currentScore","highScore","gameField","querySelectorAll","tbody","rows","side","score","bestScore","started","ARROW","LEFT","RIGHT","UP","DOWN","getValue","Math","random","getIndex","floor","updateScore","textContent","getBestScore","getTileId","r","c","toString","changeStart","innerText","classList","remove","add","canMove","setRandomNumber","isGameOver","setTimeout","style","opacity","setGame","index","tile","id","updateTile","num","value","isWin","hasEmptyTile","created","tileValue","getElementById","isOver","length","fieldRows","cells","fieldColumns","i","push","j","every","el","filterZero","row","filter","slide","currentRow","updateField","slideLeft","beforeL","String","slideRight","beforeR","reverse","slideUp","beforeU","slideDown","beforeD","addEventListener","e","code"],"mappings":"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","file":"main.9b189248.js","sourceRoot":"..\\src","sourcesContent":["'use strict';\n\nconst startButton = document.querySelector('.start');\nconst startMessage = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst currentScore = document.querySelector('.game-score');\nconst highScore = document.querySelector('.best-score');\nconst gameField = document.querySelectorAll('td');\nconst tbody = document.querySelector('tbody');\nconst rows = [...tbody.rows];\n\nlet field;\nconst side = 4;\nlet score = 0;\nlet bestScore = 0;\nlet started = false;\n\nconst ARROW = {\n  LEFT: 'ArrowLeft',\n  RIGHT: 'ArrowRight',\n  UP: 'ArrowUp',\n  DOWN: 'ArrowDown',\n};\n\nconst getValue = () => Math.random() > 0.1 ? 2 : 4;\nconst getIndex = () => Math.floor(Math.random() * side);\n\nconst updateScore = () => {\n  currentScore.textContent = score;\n};\n\nconst getBestScore = () => {\n  if (score > bestScore) {\n    bestScore = score;\n  }\n\n  highScore.textContent = bestScore;\n};\n\nconst getTileId = (r, c) => {\n  return r.toString() + '-' + c.toString();\n};\n\nconst changeStart = () => {\n  startButton.innerText = 'Restart';\n  startButton.classList.remove('start');\n  startButton.classList.add('restart');\n};\n\nconst canMove = () => {\n  setRandomNumber();\n\n  if (isGameOver()) {\n    setTimeout(() => {\n      messageLose.classList.remove('hidden');\n      tbody.style.opacity = '20%';\n      getBestScore();\n    }, 1000);\n  }\n};\n\nfunction setGame() {\n  field = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n  ];\n\n  let index = 0;\n\n  for (let r = 0; r < side; r++) {\n    for (let c = 0; c < side; c++) {\n      index++;\n\n      const tile = gameField[index - 1];\n\n      tile.id = getTileId(r, c);\n\n      const num = field[r][c];\n\n      updateTile(tile, num);\n    }\n  }\n}\n\nstartButton.addEventListener('click', () => {\n  started = true;\n\n  setGame();\n  getBestScore();\n\n  startMessage.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n\n  tbody.style.opacity = '1';\n\n  score = 0;\n  updateScore();\n\n  setRandomNumber();\n  setRandomNumber();\n});\n\nfunction updateTile(tile, num) {\n  tile.innerText = '';\n  tile.classList.value = '';\n  tile.classList.add('field-cell');\n\n  if (num > 0) {\n    tile.innerText = num;\n\n    tile.classList.add(num <= 2048 ? `field-cell--${num}` : 'field-cel--2048');\n  }\n}\n\nfunction isWin(num) {\n  if (num >= 2048) {\n    messageWin.classList.remove('hidden');\n  }\n}\n\nfunction hasEmptyTile() {\n  for (let r = 0; r < side; r++) {\n    for (let c = 0; c < side; c++) {\n      if (field[r][c] === 0) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nfunction setRandomNumber() {\n  if (!hasEmptyTile()) {\n    return;\n  }\n\n  let created = false;\n\n  while (!created) {\n    const r = getIndex();\n    const c = getIndex();\n\n    if (field[r][c] === 0) {\n      const tileValue = getValue();\n\n      field[r][c] = tileValue;\n\n      const tile = document.getElementById(getTileId(r, c));\n\n      tile.innerText = `${tileValue}`;\n      tile.classList.add(`field-cell--${tileValue}`);\n      tile.classList.add('scale');\n      created = true;\n    }\n  }\n}\n\ndocument.addEventListener('keyup', (e) => {\n  if (\n    started && (e.code === ARROW.LEFT\n    || e.code === ARROW.RIGHT\n    || e.code === ARROW.UP\n    || e.code === ARROW.DOWN)\n  ) {\n    changeStart();\n  }\n\n  switch (e.code) {\n    case ARROW.LEFT:\n      slideLeft();\n      break;\n\n    case ARROW.RIGHT:\n      slideRight();\n      break;\n\n    case ARROW.UP:\n      slideUp();\n      break;\n\n    case ARROW.DOWN:\n      slideDown();\n      break;\n  }\n});\n\nfunction isGameOver() {\n  const isOver = [];\n\n  for (let r = 0; r < rows.length; r += 1) {\n    const fieldRows = [...rows[r].cells];\n\n    const fieldColumns = [\n      rows[0].cells[r],\n      rows[1].cells[r],\n      rows[2].cells[r],\n      rows[3].cells[r],\n    ];\n\n    for (let i = 0; i < fieldRows.length - 1; i += 1) {\n      fieldRows[i].innerText !== fieldRows[i + 1].innerText\n        ? isOver.push(true)\n        : isOver.push(false);\n    }\n\n    for (let j = 0; j < fieldColumns.length - 1; j += 1) {\n      fieldColumns[j].innerText !== fieldColumns[j + 1].innerText\n        ? isOver.push(true)\n        : isOver.push(false);\n    }\n  }\n\n  for (const tile of gameField) {\n    if (!tile.innerText) {\n      isOver.push(false);\n    }\n  }\n\n  return isOver.every(el => el === true);\n}\n\nfunction filterZero(row) {\n  return row.filter(num => num !== 0);\n}\n\nfunction slide(row) {\n  let currentRow = row;\n\n  currentRow = filterZero(row);\n\n  for (let i = 0; i < currentRow.length - 1; i++) {\n    if (currentRow[i] === currentRow[i + 1]) {\n      currentRow[i] *= 2;\n      currentRow[i + 1] = 0;\n      score += currentRow[i];\n      updateScore();\n      isWin(currentRow[i]);\n    }\n  }\n\n  currentRow = filterZero(currentRow);\n\n  while (currentRow.length < side) {\n    currentRow.push(0);\n  }\n\n  return currentRow;\n}\n\nfunction updateField(r, c) {\n  const tile = document.getElementById(getTileId(r, c));\n  const num = field[r][c];\n\n  updateTile(tile, num);\n}\n\nfunction slideLeft() {\n  const beforeL = String(field);\n\n  for (let r = 0; r < side; r++) {\n    let row = field[r];\n\n    row = slide(row);\n    field[r] = row;\n\n    for (let c = 0; c < side; c++) {\n      updateField(r, c);\n    }\n  }\n\n  const afterL = String(field);\n\n  if (beforeL !== afterL) {\n    canMove();\n  }\n}\n\nfunction slideRight() {\n  const beforeR = String(field);\n\n  for (let r = 0; r < side; r++) {\n    let row = field[r];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n    field[r] = row;\n\n    for (let c = 0; c < side; c++) {\n      updateField(r, c);\n    }\n  }\n\n  const afterR = String(field);\n\n  if (beforeR !== afterR) {\n    canMove();\n  }\n}\n\nfunction slideUp() {\n  const beforeU = String(field);\n\n  for (let c = 0; c < side; c++) {\n    let row = [field[0][c], field[1][c], field[2][c], field[3][c]];\n\n    row = slide(row);\n\n    for (let r = 0; r < side; r++) {\n      field[r][c] = row[r];\n      updateField(r, c);\n    }\n  }\n\n  const afterU = String(field);\n\n  if (beforeU !== afterU) {\n    canMove();\n  }\n}\n\nfunction slideDown() {\n  const beforeD = String(field);\n\n  for (let c = 0; c < side; c++) {\n    let row = [field[0][c], field[1][c], field[2][c], field[3][c]];\n\n    row.reverse();\n    row = slide(row);\n    row.reverse();\n\n    for (let r = 0; r < side; r++) {\n      field[r][c] = row[r];\n      updateField(r, c);\n    }\n  }\n\n  const afterD = String(field);\n\n  if (beforeD !== afterD) {\n    canMove();\n  }\n}\n"]}